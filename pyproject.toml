[tool.poetry]
name='django-pbsmmapi'
version='0.2.5'
description="Django models that import content from the PBS MediaManager API"
readme='README.md'
license='MIT License, see LICENSE'
authors=['Bob Donahue']
classifiers=[
    'Development Status :: 5 - Production/Stable',
    'Environment :: Web Environment',
    'Framework :: Django',
    'Framework :: Django :: 4.0',
    'Framework :: Django :: 4.1',
    'Intended Audience :: Developers',
    'License :: OSI Approved :: MIT License',
    'Natural Language :: English',
    'Operating System :: OS Independent',
    'Topic :: Internet :: WWW/HTTP',
    'Topic :: Internet :: WWW/HTTP :: Dynamic Content',
]

[tool.poetry.dependencies]
python = ">=3.10,<4.0"
django = "*"
requests = "*"
python-dateutil = "*"
pytz = "*"

[tool.poetry.dev-dependencies]
autoimport = "*"
flake8 = "*"
ipython = "*"
isort = "*"
jedi = "*"
jedi-language-server = "*"
pylint = "*"
pytest = "*"
reorder-python-imports = "*"
yapf = "*"

[build-system]
requires = ["poetry_core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.yapf]
align_closing_bracket_with_visual_indent = false
allow_multiline_dictionary_keys = false
allow_multiline_lambdas = false
allow_split_before_default_or_named_assigns = true
allow_split_before_dict_value = false
arithmetic_precedence_indication = false
blank_lines_around_top_level_definition = 2
blank_line_before_class_docstring = false
blank_line_before_module_docstring = false
blank_line_before_nested_class_or_def = false
coalesce_brackets = false
column_limit = 90
continuation_align_style = "SPACE"
continuation_indent_width = 4
dedent_closing_brackets = true
disable_ending_comma_heuristic = false
each_dict_entry_on_separate_line = false
indent_blank_lines = false
indent_dictionary_value = false
indent_width = 4
join_multiple_lines = false
spaces_around_default_or_named_assign = false
spaces_around_power_operator = false
spaces_before_comment = 2
space_between_ending_comma_and_closing_bracket = true
split_all_comma_separated_values = false
split_all_top_level_comma_separated_values = false
split_arguments_when_comma_terminated = true
split_before_arithmetic_operator = false
split_before_bitwise_operator = false
split_before_closing_bracket = true
split_before_dict_set_generator = true
split_before_dot = false
split_before_expression_after_opening_paren = true
split_before_first_argument = true
split_before_logical_operator = false
split_before_named_assigns = true
split_complex_comprehension = true
split_penalty_after_opening_bracket = 300
split_penalty_after_unary_operator = 10000
split_penalty_arithmetic_operator = 300
split_penalty_before_if_expr = 30
split_penalty_bitwise_operator = 300
split_penalty_comprehension = 80
split_penalty_excess_character = 7000
split_penalty_for_added_line_split = 0
split_penalty_import_names = 0
split_penalty_logical_operator = 300
use_tabs = false

[tool.isort]
profile = "google"
src_paths = ["pbsmmapi"]
single_line_exclusions = []
force_sort_within_sections = false

[tool.pylint.main]
extension-pkg-whitelist = ["pydantic"]

[tool.pylint.logging]
disable = ["raw-checker-failed", "bad-inline-option", "locally-disabled", "file-ignored", "suppressed-message", "useless-suppression", "deprecated-pragma", "use-symbolic-message-instead", "missing-module-docstring", "missing-class-docstring", "too-few-public-methods", "missing-function-docstring", "too-many-lines", "logging-format-interpolation", "wrong-import-position", "unused-import", "too-many-ancestors"]
